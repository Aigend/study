描述
给定一个整数数组 cost  ，其中 cost[i]  是从楼梯第i 个台阶向上爬需要支付的费用，下标从0开始。
一旦你支付此费用，即可选择向上爬一个或者两个台阶。

你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。

请你计算并返回达到楼梯顶部的最低花费。
输入：
[1,100,1,1,1,90,1,1,80,1]

返回值：
6

说明：
你将从下标为 0 的台阶开始。
1.支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
2.支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
3.支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
4.支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
5.支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
6.支付 1 ，向上爬一个台阶，到达楼梯顶部。
总花费为 6 。    

class Solution:
    def minCostClimbingStairs(self , cost: List[int]) -> int:
        #dp[i]表示爬到第i阶楼梯需要的最小花费
        dp = [0 for i in range(len(cost) + 1)] 
        for i in range(2, len(cost) + 1):
            #每次选取最小的方案
            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]) 
        return dp[len(cost)]
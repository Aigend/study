docker search mysql
docker pull mysql:latest
docker run -d --name mysql -p 3306:3306 -v /usr/local/docker/mysql/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -v /usr/local/docker/mysql/data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:latest
	-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。
	MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。
	-v /usr/local/docker/mysql/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf: 将容器中 /etc/mysql/mysql.conf.d/mysqld.cnf 配置文件挂载到宿主机的 /usr/local/docker/mysql/config/mysqld.cnf 文件上；
	-v /usr/local/docker/mysql/data:/var/lib/mysql: 将容器中 /var/lib/mysql 数据目录挂载到宿主机的 /usr/local/docker/mysql/data 目录下；

mysql -h10.143.16.44 -u root -p  
show databases;
use mysql;
show tables;
desc user;
#insert into user (host, user, password, )
MySQL 元数据:
	你可能想知道MySQL以下三种信息：

	查询结果信息： SELECT, UPDATE 或 DELETE语句影响的记录数。
	数据库和数据表的信息： 包含了数据库及数据表的结构信息。
	MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等。
		select version();
		SELECT USER( );
		SELECT DATABASE( );
		SHOW STATUS; # 服务器状态
		SHOW VARIABLES; # 服务器配置变量
create database test;
drop database test;
exit;

CREATE DATABASE 数据库名;

CREATE TABLE IF NOT EXISTS `runoob_tcl`(
   `runooc_id` INT UNSIGNED AUTO_INCREMENT,
   `runooc_title` VARCHAR(100) NOT NULL,
   `runooc_author` VARCHAR(40) NOT NULL,
   `submission_date` DATE,
   PRIMARY KEY ( `runooc_id` )
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS `runoob_tcd`(
   `runood_id` INT UNSIGNED AUTO_INCREMENT,
   `runooc_tit` VARCHAR(100) NOT NULL,
   `runooc_auth` VARCHAR(40) NOT NULL,
   `runooc_auth11` VARCHAR(40) NOT NULL,
   `submission_date` DATE,
   PRIMARY KEY ( `runood_id` )
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO runoob_tcl (runooc_title, runooc_author, submission_date) VALUES ("学习 PHP", "菜鸟教程", NOW());

SELECT column_name,column_name FROM table_name [WHERE Clause] [LIMIT N][ OFFSET M]
	你可以使用 LIMIT 属性来设定返回的记录数
	你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。
	select * from runoob_tbl limit 1, 2; # 1是偏移量，2是返回数量
	select * from runoob_tbl limit 2 offset 1; 2是返回数量，1是偏移量

MySQL 的 WHERE 子句的字符串比较是不区分大小写的。 你可以使用 BINARY 关键字来设定 WHERE 子句的字符串比较是区分大小写的
SELECT * from runoob_tbl WHERE BINARY runoob_author='runoob.com';

UPDATE runoob_tbl SET runoob_title='学习 C++' WHERE runoob_id=3;

DELETE FROM runoob_tbl WHERE runoob_id=3;
	如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。

SELECT field1, field2,...fieldN 
FROM table_name
WHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue'

SELECT * from runoob_tbl  WHERE runoob_author LIKE '%COM';
	百分号 %字符来表示任意字符，类似于UNIX或正则表达式中的星号 *

union all 和union都是讲两个结果集合并为一个
	union
		union取唯一值，记录没有重复
	union all
		union all是直接连接，取到得是所有值，记录可能有重复

SELECT * from runoob_tbl ORDER BY submission_date ASC;

DROP TABLE IF EXISTS `employee_tbl`;
CREATE TABLE `employee_tbl` (
  `id` int(11) NOT NULL,
  `name` char(10) NOT NULL DEFAULT '',
  `date` datetime NOT NULL,
  `signin` tinyint(4) NOT NULL DEFAULT '0' COMMENT '登录次数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

BEGIN;
INSERT INTO `employee_tbl` VALUES ('1', '小明', '2016-04-22 15:25:33', '1'), ('2', '小王', '2016-04-20 15:25:47', '3'), ('3', '小丽', '2016-04-19 15:26:02', '2'), ('4', '小王', '2016-04-07 15:26:14', '4'), ('5', '小明', '2016-04-11 15:26:40', '4'), ('6', '小明', '2016-04-04 15:26:54', '2');
COMMIT;

SELECT name FROM person_tbl WHERE name REGEXP 'ok$';

ALTER TABLE testalter_tbl  DROP i;
	如果数据表中只剩余一个字段则无法使用DROP来删除字段。
ALTER TABLE testalter_tbl ADD i INT;

ALTER TABLE testalter_tbl DROP i;
ALTER TABLE testalter_tbl ADD i INT FIRST;
ALTER TABLE testalter_tbl DROP i;
ALTER TABLE testalter_tbl ADD i INT AFTER c;

ALTER TABLE testalter_tbl MODIFY c CHAR(10);

ALTER TABLE testalter_tbl CHANGE i j BIGINT NOT NULL DEFAULT 100;
	如果你不设置默认值，MySQL会自动设置该字段默认为 NULL。

修改字段默认值:
	ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;
	ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;

ALTER TABLE testalter_tbl RENAME TO alter_tbl;

MySQL 复制表
	mysql> INSERT INTO clone_tbl (runoob_id,
    ->                        runoob_title,
    ->                        runoob_author,
    ->                        submission_date)
    -> SELECT runoob_id,runoob_title,
    ->        runoob_author,submission_date
    -> FROM runoob_tbl;

MySQL 序列使用:
	MySQL 序列是一组整数：1, 2, 3, ...，由于一张数据表只能有一个字段自增主键， 如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现。
	MySQL 中最简单使用序列的方法就是使用 MySQL AUTO_INCREMENT 来定义序列。

	mysql> ALTER TABLE insect DROP id;
	mysql> ALTER TABLE insect
	    -> ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,
	    -> ADD PRIMARY KEY (id);

    一般情况下序列的开始值为1，但如果你需要指定一个开始值100，那我们可以通过以下语句来实现
	mysql> CREATE TABLE insect
    -> (
    -> id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    -> PRIMARY KEY (id),
    -> name VARCHAR(30) NOT NULL, 
    -> date DATE NOT NULL,
    -> origin VARCHAR(30) NOT NULL
	)engine=innodb auto_increment=100 charset=utf8;
	或者你也可以在表创建成功后，通过以下语句来实现：
	mysql> ALTER TABLE t AUTO_INCREMENT = 100;

MySQL 及 SQL 注入
	如果您通过网页获取用户输入的数据并将其插入一个MySQL数据库，那么就有可能发生SQL注入安全的问题。

MySQL 导入数据
	mysql -u用户名    -p密码    <  要导入的数据库数据(runoob.sql)

	source 命令导入
	source 命令导入数据库需要先登录到数库终端：
		mysql> create database abc;      # 创建数据库
		mysql> use abc;                  # 使用已创建的数据库 
		mysql> set names utf8;           # 设置编码
		mysql> source /home/abc/abc.sql  # 导入备份数据库


视图是什么
	通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。
	视图是对若干张基本表的引用，一张虚表，查询语句执行的结果，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；
	方便操作，特别是查询操作，减少复杂的SQL语句，增强可读性
	create view 视图名称 as select语句;

	show tables; # 查看表会将所有的视图也列出来

	select * from v_stu_score;

	drop view v_stu_sco;

事务
	所谓事务,它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。
	在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。
	原子性（atomicity）
		一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性

	一致性（consistency）
		数据库总是从一个一致性的状态转换到另一个一致性的状态。（在前面的例子中，一致性确保了，即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。）

	隔离性（isolation）
		通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。（在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去200美元。）事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。

	持久性（durability）
		一旦事务提交，则其所做的修改会永久保存到数据库。（此时即使系统崩溃，修改的数据也不会丢失。）,

	事务控制语句：
		BEGIN 或 START TRANSACTION 显式地开启一个事务；

		COMMIT 也可以使用 COMMIT WORK，不过二者是等价的。COMMIT 会提交事务，并使已对数据库进行的所有修改成为永久性的；

		ROLLBACK 也可以使用 ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；

		SAVEPOINT identifier，SAVEPOINT 允许在事务中创建一个保存点，一个事务中可以有多个 SAVEPOINT；

		RELEASE SAVEPOINT identifier 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；

		ROLLBACK TO identifier 把事务回滚到标记点；

		SET TRANSACTION 用来设置事务的隔离级别。InnoDB 存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。

	MYSQL 事务处理主要有两种方法：
		1、用 BEGIN, ROLLBACK, COMMIT来实现

		BEGIN 开始一个事务
		ROLLBACK 事务回滚
		COMMIT 事务确认
		2、直接用 SET 来改变 MySQL 的自动提交模式:

		SET AUTOCOMMIT=0 禁止自动提交
		SET AUTOCOMMIT=1 开启自动提交

索引是什么
	索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。

	更通俗的说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度

	索引的使用
	查看索引:show index from 表名;
	创建索引:如果指定字段是字符串，需要指定长度，建议长度与定义字段时的长度一致,字段类型如果不是字符串，可以不填写长度部分:create index 索引名称 on 表名(字段名称(长度))
	删除索引：drop index 索引名称 on 表名;DELETE FROM runoob_tbl WHERE runoob_id=3;

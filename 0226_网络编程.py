# CS BS 架构
# 连接问题：
	多系统：手机，电脑，智能家居
	多介质：wifi, 有线
	目标问题：具体设备
	多软件同时使用网络

	光纤：光信号
	网线：电信号
	wifi:电磁波信号
# OSI 七层模型
应用层：程序：微信
表示层：用来描述文件类型的，如果不告诉你发的数据类型，你无法使用正确的程序打开
会话层：数据拆包，数据拆包合并，决定什么时候开始发，什么时候开始断

传输层：解决用什么方式发的问题：tcp和udp协议
		tcp 可靠，传输速度慢，经过的设备多，发生丢包的可能性大：发生100M，会拆分成很多的小包 1500 byte 0001 0002 每发一个包都要进行确认
		udp 不可靠 速度快，经过的设备少，丢包的可能性小：直播平台使用
		端口的概念：数据都是通过网卡发送的 通过端口确认包是发给哪个程序的
网络层：解决发到哪里的问题：ip地址
		公网ip  全世界唯一， 快递地址
		内网ip  局域网唯一， 房间号

数据链路层：解决发给谁的问题：mac地址，每块网卡都有，全世界唯一，根据mac地址可以查询具体厂商的网卡
物理层：解决信号转换的问题：网线会把数字信号转成电信号，光纤会转成光信号

TCP/IP协议：规定数据的组织形式
协议：头部+数据
打包的过程就是给数据加头部，拆包的过程就是给数据拿掉头部
物理层：
	01100001010110 
	规定：一组数据称之为一个bit流
数据链路层
	如果都是01信号，无法分组，我们就无法解析数据
	以太网协议规定：一组数据称之为一个数据帧
	mac地址占6个字节 IP协议类型占2个字节，为了数据的正确传输，最后结尾会有4个字节的帧校验
	6+6+2+4 = 18 有的人说14,有的说18一个意思
	以太网的数据长度是46-1500 Byte，超过1500就会进行切片
	以太网帧格式：
	前导码(7Byte) + 帧起始界定符SFD(1Byte) + 源mac地址(6Byte) + 目的mac地址(6Byte) + 类型(2Byte) + 数据(46-1500Byte) + 帧校验/帧尾FCS(4Byte)
	工作方式：广播
	不能把全世界所有的电脑都集中到一个广播域中，就有了网络层
	局域网计算机 通过网关(网关有两个地址，一个局域网地址，一个对外地址)
		网关收到数据，使用路由协议(规定公网上设备收到数据后应该发给下面哪个设备)把数据往公网发
网络层
	IPV4:0.0.0.0---255.255.255.255 大约43亿设备，不够用
		NAT技术：内网IP段
			10.0.0.0---10.255.255.255 一千六百多万
			172.16.0.0---12.31.255.255 104万
			192.168.0.0---192.168.255.255 65536个

		172.0.0.0-127.255.255.255 保留地址
	IPV6:
		分为8组。每组4个16进制数，128个bit

	子网掩码：和IPV4 ip地址相同
		2种形式：192.168.3.88/255.255.255.0
			linux：192.168.3.88/24
		通过IP地址和子网掩码就可以知道局域网的IP范围，进而判断对方的IP是否是在自己的网段范围内
		如果不是同一个网段，需要跨子网通信，就把数据发送给网关，网关走路由协议，通过IP地址把数据发给对方子网
			是同一个网段，就通过mac地址通信

	ARP 协议：
		交换机如果只知道对方的ip地址不知道mac地址的时候，ARP 广播给局域网内所有机器，目的ip会回应mac地址

		arp -a 
		arp -d * 清空当前的arp表
传输层
	mac地址是局域网通信
	(源mac地址， 目的mac/网关mac) (源ip 目的ip) 数据
	TCP/UDP
	tcp头部+数据/udp头部+数据
	头部：包含源端口，目的端口， tcp还包括数据段的序列号
	传输层数据比较大的时候，会拆分成段

	DNS 用的就是udp传输

	握手包标识：SYN
	挥手包标识：FIN
	数据包标识：PSH
	确认包标识：ACK
	重发包标识：RST
	紧急包标识：URG

	1.客户端---》服务端：SYN seq=x, ack（抓包看第一次是没有ack的）
		我们抓包看到的seq有可能是0，这是以为waireshark做了转换，修改下工具配置可以看到这个随机数
	2.服务端---》客户端：ACK, seq=y, ack=x+1
		到这里，客户端就知道了和服务端的通信是通畅的，但服务端不知道和客户端是否通信OK
	3.服务端---》客户端：SYN, seq=y, ack=x+1
	4.客户端---》服务端：ACK seq=x+1, ack=y+1
	2和3往往是一起发送的


应用层
wireshark:
	ip.addr == 192.168.1.3
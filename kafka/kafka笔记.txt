面试题1:
	为什么消费者会重复消费消息、漏消息？---2024.1.11，一面饿了吗
	一个消费者启动时，offset会被初始化为0，这代表我们从0开始消费，每消费一条消息，offset会递增一次。
	如果一直正常消费(消费者不故障)是不会导致消息重复消费以及漏消息的。但是当以下两种情况发生时，会分别发生漏消息与重复消费消息的情况；
	1.先提交offset，再消费消息
	offset被提交到kafka broker，但是消息还没来得及被消费，消费者故障了需要重启，由于offset已经被提交了，所以这个情况会发生漏消费的问题。
	2.先消费消息，再提交offset
	先把消息消费完了，但offset还未被提交，消费者故障重启，消息已经被消费，但offset未提交，此时故障会产生消息重复消费的问题。

	Kafka的自动提交offset与手动提交offset
	首要要给大家说明的是不论是手动提交或是自动提交皆会有出错的风险
	一、自动提交offset
	自动提交offset使用enable.auto.commit=true\false来开启或关闭，自动offset是根据配置参数的时间来决定提交间隔的(auto.commit.interval.ms)来决定的，
	这意味着自动提交可能出现重复消费的情况（也就是消费了消息、消费者还没提交offset就故障了）；
	二、手动提交offset
	相对于自动提交来说手动提交的优点是我们可以更好的把握提交时机，但手动提交也有失败的风险(Timeout、故障等)，把自动关闭我们就需要手动提交offset。手动提交有两种方式
	1.同步提交(commitSync)
	 同步提交在消费过后显示调用consumer.commitSync()，会阻塞线程并且失败会重新尝试提交。相比异步提交它的优点是可用性比异步提交强。
	2.异步提交(commitAsync)
	异步提交在消费过后显示调用consumer.commitAsync()，没有重新提交机制。它的优点是不会阻塞线程因此效率更高。


基础知识：
	https://www.jianshu.com/p/fdd558c4c79d
	https://blog.csdn.net/u010365819/article/details/118581415
精华文章：https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&mid=2247496058&idx=1&sn=f3265299d90fde9dd9a4f4afe88411f8&source=41#wechat_redirect
		https://www.cnblogs.com/javaTank/p/14524038.html
定义：
	分布式的基于发布订阅模式的消息队列（Message Queue) 主要应用于大数据实时数据处理领域
	点对点模式：消息无法重复消费，消费者主动拉取数据，消息收到后消息清除
	发布订阅模式：消费者消费数据之后不会清除消息；消息可以传给多个消费者组
		有两种模式，一种类似公众号推送的，队列主动推送消息一种是消费者主动拉取的。
		kafka采取的是第二种，消费者的消费速度由消费者决定，kafka的这种缺点：消费者需要维护长轮询，查询有没有消息供消费

生产者生产消息
kafka集群管理消息
消费者消费消息
Zookeeper注册消息	
几个概念：
	kafka Cluster 集群
	分区的作用：提高了并发度
	leader:针对某个topic的某个分区是有lead的
	follower:分区的数据副本：replication A/0
	同一个分区中的消息只能被同一个组内的某个消费者消费
	消费者的数量如果大于分区数目，必然存在消费者等待，不能消费，浪费资源的情况
	zookeeper:帮kafka存储一些信息，帮消费者存储消费的信息(消费到哪了)， offset 0.9版本存储在zk,0.9以后存在kafka
	kafka 存消费默认保留7天，是存在磁盘，不是内存

